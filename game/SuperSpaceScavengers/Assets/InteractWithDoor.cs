///////////////////////////////////////////////////////////////////////////////////////////////////
//AUTHOR — Travis Moore
//SCRIPT — InteractWithDoor.cs
///////////////////////////////////////////////////////////////////////////////////////////////////

//#pragma warning disable 0169
//#pragma warning disable 0649
//#pragma warning disable 0108
//#pragma warning disable 0414

using UnityEngine;
using System.Collections;
//using System.Collections.Generic;
//using UnityEngine.UI;

#region ENUMS
//public enum EnumStatus
//{
//	
//};
#endregion

#region EVENTS
//public class EVENT_EXAMPLE : GameEvent
//{
//    public EVENT_EXAMPLE() { }
//}
#endregion

public class InteractWithDoor : InputActionBase
{
    #region FIELDS

    Door door;

    #endregion

    #region INITIALIZATION
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// OnValidate
    /// </summary>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    void OnValidate()
    {
        //refs
        
        //set/check initial values

    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// Awake
    /// </summary>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    protected override void Awake()
    {
        base.Awake();
        //listen to events
        SetSubscriptions();
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// Start
    /// </summary>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    void Start()
    {

    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// SetSubscriptions
    /// </summary>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    protected override void SetSubscriptions()
    {
        base.SetSubscriptions();
        Events.instance.AddListener<EVENT_PLAYER_INTERACTION_DOOR>(ReadyDoor);
    }
    #endregion

    #region PUBLIC METHODS
    ///////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    #region PRIVATE METHODS
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// set's door to the current door we're interacting with
    /// </summary>
    /// <param name="_event">door script</param>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    void ReadyDoor(EVENT_PLAYER_INTERACTION_DOOR _event)
    {
        door = _event.door;
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// OnRelease
    /// </summary>
    /// <param name="_input"></param>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    protected override void OnReleased(InputData _input)
    {
        
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// OnPressed
    /// </summary>
    /// <param name="_input"></param>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    protected override void OnPressed(InputData _input)
    {
        //check if door exists
        if(door != null)
        {
            //check if door is set to manual
            if (door.Type == DoorType.MANUAL)
            {
                //check if door is either closed/openned
                if (door.Status == DoorStatus.CLOSED)
                {
                    //Debug.Log("Attempting to open("+door.gameObject.name+")");
                    door.OpenDoor();
                }
                else if (door.Status == DoorStatus.OPEN)
                {
                    //Debug.Log("Attempting to close(" + door.gameObject.name + ")");
                    door.CloseDoor();
                }
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// OnHeld
    /// </summary>
    /// <param name="_input"></param>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    protected override void OnHeld(InputData _input)
    {
        //print(_input.Name + " is held!");
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// NEVER USE THIS!!!
    /// </summary>
    /// <param name="_input"></param>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    protected override void OnInactive(InputData _input)
    {
        //print(_input.Name + " is inactive!");
    }
    #endregion

    #region ONDESTORY
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// OnDestroy
    /// </summary>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    protected override void OnDestroy()
    {
        base.OnDestroy();

        //remove event listeners
        Events.instance.RemoveListener<EVENT_PLAYER_INTERACTION_DOOR>(ReadyDoor);
    }
    #endregion

}